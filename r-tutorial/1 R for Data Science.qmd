---
title: "Introduction to R and RStudio"
author: "Mohan Khanal"
date: "2025-07-29"
format:
  html:
    toc: true          # Enable table of contents
    toc-location: left # Place TOC on the left side
    toc-title: "Contents"
    toc-depth: 2       # Show headers up to level 2 (##)
  pdf:
    toc: true          # Also enable TOC in PDF
    number-sections: true
---

------------------------------------------------------------------------

# Introduction to R and RStudio

This 2-hour online session introduces R and RStudio: how to install them, navigate the interface, and use packages and libraries. It includes demos and interactive practice.

------------------------------------------------------------------------

## üïê Agenda

-   **Part 1 (30 mins)** ‚Äì Installation and Setup
-   **Part 2 (20 mins)** ‚Äì RStudio Interface Tour
-   **Part 3 (20 mins)** ‚Äì Basic R Commands
-   **Part 4 (40 mins)** ‚Äì R Packages and Libraries
-   **Part 5 (10 mins)** ‚Äì Practice and Q&A

------------------------------------------------------------------------

## Part 1: Installation and Setup (30 mins)

### Installing R

-   Go to <https://cran.r-project.org>
-   Choose your OS: Windows, macOS, or Linux
-   Download and install the latest version of R

### Installing RStudio

-   Go to <https://posit.co/download/rstudio-desktop/>
-   Choose the **RStudio Desktop (Free)** version
-   Install **RStudio after installing R**

> üí° Tip: R is the programming language. RStudio is the environment that helps you work with R more easily.

------------------------------------------------------------------------

## Part 2: RStudio Interface Tour (20 mins)

When you open RStudio, you‚Äôll see four main panels:

1.  **Source (Top-Left)** ‚Äì Script Editor (`.R`, `.Rmd`)
2.  **Console (Bottom-Left)** ‚Äì Command Execution
3.  **Environment/History (Top-Right)** ‚Äì Lists variables and past commands
4.  **Files/Plots/Packages/Help/Viewer (Bottom-Right)** ‚Äì File manager, plot viewer, documentation, etc.

### Live Demo

-   Create an R script (`.R`)
-   Type and run:

```{r}

print("Hello, R world!")

```

To output texts in R use single or double quotes

Similarly, to output numbers just type the numbers(without quotes)

```{r}
1
2
3
```

To do simple calculations, add numbers together

```{r}
1+2
```

------------------------------------------------------------------------

## Part 3: Basic R Concepts and Commands (20 mins)

### Vector

sequence of data elements of the same basic type. Same thing as array in c or c++ or any other language. eg : 1, 3, 4, 5, ... 10.

-   It is ordered set - will always have a beginning or end.

e.g. "Z" "f" "7" "yes" "A" "Ab"

-   even if we try to put in a 7 as a number into a character vector R will automatically change it into a character.
-   of course it has to have quotation marks.

### Data type

-   [numeric]{style="color:red"}: 7.2, 67, 711
-   [integer]{style="color:red"}: 1L, 99L, 1000L (L declares this as an integer)
-   [complex]{style="color:red"}: 7 + 12i, where "i" is the imaginary part
-   [character]{style="color:red"} (a.k.a. string): "k", "R is exciting", "FALSE", "11.5"
-   [logical]{style="color:red"} (a.k.a. boolean): TRUE or FALSE

```{r}
# numeric
y <- 7.2
class(y)

# integer
y <- 500L
class(y)

# complex
y <- 4i + 7
class(y)

# character/string
y <- "Learning R is fun"
class(y)

# logical/boolean
y <- FALSE
class(y)
```

In R programming the numeric data type encompasses both integer and double (double-precision floating-point numbers).

### Variables and Math

```{r,echo=TRUE}
x <- 10
y <- 5
x + y       # Addition
x * y       # Multiplication
```

### Using Functions

```{r}
mean(c(1, 2, 3, 4, 5))
sum(1:10)
```

### Creating Vector 

-   seq() - sequence e.g. seq(1,15) = 1: 15 = 1,2,,3,4,5,..., 15, seq(1,15,2) = 1,3,5,7,9,...15

-   rep()- rep(3,50) = 3 50 times , we can replicate a character vector as well.

-   rnorm() - used to create numeric vector containing random numbers drawn from a normal distribution - rnorm(10) - creates 10 random numbers from standard normal distribution.

### Using Square[] bracket
```{r}

w <- c("a", "b", "c","d")
w
w[1] #acess first - i.e 1 

w[-3] # access except the third one 
```

### Help System

```{r}
#?mean
#help("sum")
```

------------------------------------------------------------------------

## Part 4: Packages and Libraries (40 mins)

### What are Packages?
Packages are collections of R functions, data, and compiled code in a well defined format. The directory where packages are stored is called the library.

Packages extend R‚Äôs core functionality ‚Äî like `ggplot2` for plotting, or `dplyr` for data manipulation.

### Installing Packages

```{r}
#install.packages("ggplot2")
#install.packages("dplyr")
#
```

### Loading a Package

```{r}
library(ggplot2)
library(dplyr)
```
using quotation mark is optional 

### Data Structure 
** Vector: list of items 
```{r}
# vector of fruits
fruits <- c("banana","apple", "orange")

#print fruits 
fruits

#Vector length
length(fruits)

```

** Lists : collection of data which is ordered and changeable. To create a list, use the list() funciton: 
```{r}
names <- list("apple","ball","cat")

#print the list
names

# Append the list 
append(names, "dog")

```
--------------------------------
##### Notes : important codes

#dim()
#class()
#attribute()
#rm(list=ls())
#Ctrl+L = clear console
# Ctrl + + = zoom in - = Zoom out 
#view() = in new tab
** Matrices : two dimensional data set with  columns and rows
```{r}
# Create a matrix
firstmatrix <- matrix(c(1,2,3,4,5,6), nrow = 3, ncol = 2)

# Print the matrix
firstmatrix
```

*****Note: c() function is used to concatenate items together.

** DataFrames in R - It is used for storing data tables. It can contain multiple data types in multiple columns called fields. It is a generalized form of a matrix. It is like a table in excel sheets. It has column and row names. The name of rows are unique with no empty columns. The data stored must be numeric, character or factor type. DataFrames are heterogeneous. 
Example: 
```{r}
# creating company data frame
comp.data <- data.frame(
  # company ids
  comp_id = c(1:3),
  # company names
  comp_name = c("XYZ", "ABC", "KLM"),
  growth = c(16000, 14000, 12000),
  # company start dates
  comp_start_date = as.Date(c("02/05/25", "04/04/25", "05/03/25"), format = "%m/%d/%y")
)

# print the data frame
print(comp.data)
```


Exploring Data

```{r}
dat<- datasets::iris
head(dat)
```
```{r}
names(dat)

#or
colnames(dat)

#counting column
ncol(dat)
```

Piping Concept : when we press % > %  (without space) = %>% whose shortcut is ctrl+ shit +M (Windows) it help to run code of the right side to the left side file. 

Calling an variable or column : We use $ like : df$var1 
------------------------------------------------------------------

